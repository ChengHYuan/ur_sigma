// Generated by gencpp from file dmp/GoalToPathRequest.msg
// DO NOT EDIT!


#ifndef DMP_MESSAGE_GOALTOPATHREQUEST_H
#define DMP_MESSAGE_GOALTOPATHREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dmp
{
template <class ContainerAllocator>
struct GoalToPathRequest_
{
  typedef GoalToPathRequest_<ContainerAllocator> Type;

  GoalToPathRequest_()
    : Start()
    , GoalIndex(0)  {
    }
  GoalToPathRequest_(const ContainerAllocator& _alloc)
    : Start(_alloc)
    , GoalIndex(0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _Start_type;
  _Start_type Start;

   typedef int32_t _GoalIndex_type;
  _GoalIndex_type GoalIndex;





  typedef boost::shared_ptr< ::dmp::GoalToPathRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dmp::GoalToPathRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GoalToPathRequest_

typedef ::dmp::GoalToPathRequest_<std::allocator<void> > GoalToPathRequest;

typedef boost::shared_ptr< ::dmp::GoalToPathRequest > GoalToPathRequestPtr;
typedef boost::shared_ptr< ::dmp::GoalToPathRequest const> GoalToPathRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dmp::GoalToPathRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dmp::GoalToPathRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dmp::GoalToPathRequest_<ContainerAllocator1> & lhs, const ::dmp::GoalToPathRequest_<ContainerAllocator2> & rhs)
{
  return lhs.Start == rhs.Start &&
    lhs.GoalIndex == rhs.GoalIndex;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dmp::GoalToPathRequest_<ContainerAllocator1> & lhs, const ::dmp::GoalToPathRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dmp

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dmp::GoalToPathRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dmp::GoalToPathRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dmp::GoalToPathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dmp::GoalToPathRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dmp::GoalToPathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dmp::GoalToPathRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dmp::GoalToPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "47f8665a74074523c873649f357d3ba7";
  }

  static const char* value(const ::dmp::GoalToPathRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x47f8665a74074523ULL;
  static const uint64_t static_value2 = 0xc873649f357d3ba7ULL;
};

template<class ContainerAllocator>
struct DataType< ::dmp::GoalToPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dmp/GoalToPathRequest";
  }

  static const char* value(const ::dmp::GoalToPathRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dmp::GoalToPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] Start\n"
"\n"
"int32 GoalIndex\n"
;
  }

  static const char* value(const ::dmp::GoalToPathRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dmp::GoalToPathRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Start);
      stream.next(m.GoalIndex);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoalToPathRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dmp::GoalToPathRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dmp::GoalToPathRequest_<ContainerAllocator>& v)
  {
    s << indent << "Start[]" << std::endl;
    for (size_t i = 0; i < v.Start.size(); ++i)
    {
      s << indent << "  Start[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Start[i]);
    }
    s << indent << "GoalIndex: ";
    Printer<int32_t>::stream(s, indent + "  ", v.GoalIndex);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DMP_MESSAGE_GOALTOPATHREQUEST_H

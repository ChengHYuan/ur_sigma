// Generated by gencpp from file dmp/GetDMPStepPlanResponse.msg
// DO NOT EDIT!


#ifndef DMP_MESSAGE_GETDMPSTEPPLANRESPONSE_H
#define DMP_MESSAGE_GETDMPSTEPPLANRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dmp/DMPPoint.h>

namespace dmp
{
template <class ContainerAllocator>
struct GetDMPStepPlanResponse_
{
  typedef GetDMPStepPlanResponse_<ContainerAllocator> Type;

  GetDMPStepPlanResponse_()
    : plan()
    , at_goal(0)  {
    }
  GetDMPStepPlanResponse_(const ContainerAllocator& _alloc)
    : plan(_alloc)
    , at_goal(0)  {
  (void)_alloc;
    }



   typedef  ::dmp::DMPPoint_<ContainerAllocator>  _plan_type;
  _plan_type plan;

   typedef uint8_t _at_goal_type;
  _at_goal_type at_goal;





  typedef boost::shared_ptr< ::dmp::GetDMPStepPlanResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dmp::GetDMPStepPlanResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetDMPStepPlanResponse_

typedef ::dmp::GetDMPStepPlanResponse_<std::allocator<void> > GetDMPStepPlanResponse;

typedef boost::shared_ptr< ::dmp::GetDMPStepPlanResponse > GetDMPStepPlanResponsePtr;
typedef boost::shared_ptr< ::dmp::GetDMPStepPlanResponse const> GetDMPStepPlanResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dmp::GetDMPStepPlanResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dmp::GetDMPStepPlanResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dmp::GetDMPStepPlanResponse_<ContainerAllocator1> & lhs, const ::dmp::GetDMPStepPlanResponse_<ContainerAllocator2> & rhs)
{
  return lhs.plan == rhs.plan &&
    lhs.at_goal == rhs.at_goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dmp::GetDMPStepPlanResponse_<ContainerAllocator1> & lhs, const ::dmp::GetDMPStepPlanResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dmp

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dmp::GetDMPStepPlanResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dmp::GetDMPStepPlanResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dmp::GetDMPStepPlanResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dmp::GetDMPStepPlanResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dmp::GetDMPStepPlanResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dmp::GetDMPStepPlanResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dmp::GetDMPStepPlanResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f8ae251b65217aafe96e3f26f709fdac";
  }

  static const char* value(const ::dmp::GetDMPStepPlanResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf8ae251b65217aafULL;
  static const uint64_t static_value2 = 0xe96e3f26f709fdacULL;
};

template<class ContainerAllocator>
struct DataType< ::dmp::GetDMPStepPlanResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dmp/GetDMPStepPlanResponse";
  }

  static const char* value(const ::dmp::GetDMPStepPlanResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dmp::GetDMPStepPlanResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# Returns a planned trajectory. \n"
"DMPPoint plan\n"
"\n"
"#1 if the final time is greater than tau AND the planned position is within goal_thresh of the goal, 0 otherwise\n"
"uint8 at_goal\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: dmp/DMPPoint\n"
"# Positions and velocities of DOFs\n"
"#Velocity is only used for movement plans, not for giving demonstrations.\n"
"float64[] positions\n"
"float64[] velocities\n"
"\n"
"\n"
;
  }

  static const char* value(const ::dmp::GetDMPStepPlanResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dmp::GetDMPStepPlanResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.plan);
      stream.next(m.at_goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetDMPStepPlanResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dmp::GetDMPStepPlanResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dmp::GetDMPStepPlanResponse_<ContainerAllocator>& v)
  {
    s << indent << "plan: ";
    s << std::endl;
    Printer< ::dmp::DMPPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.plan);
    s << indent << "at_goal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.at_goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DMP_MESSAGE_GETDMPSTEPPLANRESPONSE_H

// Generated by gencpp from file dmp/GetDMPStepPlanRequest.msg
// DO NOT EDIT!


#ifndef DMP_MESSAGE_GETDMPSTEPPLANREQUEST_H
#define DMP_MESSAGE_GETDMPSTEPPLANREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dmp/DMPPoint.h>

namespace dmp
{
template <class ContainerAllocator>
struct GetDMPStepPlanRequest_
{
  typedef GetDMPStepPlanRequest_<ContainerAllocator> Type;

  GetDMPStepPlanRequest_()
    : x_0()
    , current()
    , t_0(0.0)
    , goal()
    , goal_thresh()
    , seg_length(0.0)
    , tau(0.0)
    , dt(0.0)
    , integrate_iter(0)  {
    }
  GetDMPStepPlanRequest_(const ContainerAllocator& _alloc)
    : x_0(_alloc)
    , current(_alloc)
    , t_0(0.0)
    , goal(_alloc)
    , goal_thresh(_alloc)
    , seg_length(0.0)
    , tau(0.0)
    , dt(0.0)
    , integrate_iter(0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _x_0_type;
  _x_0_type x_0;

   typedef  ::dmp::DMPPoint_<ContainerAllocator>  _current_type;
  _current_type current;

   typedef double _t_0_type;
  _t_0_type t_0;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _goal_type;
  _goal_type goal;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _goal_thresh_type;
  _goal_thresh_type goal_thresh;

   typedef double _seg_length_type;
  _seg_length_type seg_length;

   typedef double _tau_type;
  _tau_type tau;

   typedef double _dt_type;
  _dt_type dt;

   typedef int32_t _integrate_iter_type;
  _integrate_iter_type integrate_iter;





  typedef boost::shared_ptr< ::dmp::GetDMPStepPlanRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dmp::GetDMPStepPlanRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetDMPStepPlanRequest_

typedef ::dmp::GetDMPStepPlanRequest_<std::allocator<void> > GetDMPStepPlanRequest;

typedef boost::shared_ptr< ::dmp::GetDMPStepPlanRequest > GetDMPStepPlanRequestPtr;
typedef boost::shared_ptr< ::dmp::GetDMPStepPlanRequest const> GetDMPStepPlanRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dmp::GetDMPStepPlanRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dmp::GetDMPStepPlanRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dmp::GetDMPStepPlanRequest_<ContainerAllocator1> & lhs, const ::dmp::GetDMPStepPlanRequest_<ContainerAllocator2> & rhs)
{
  return lhs.x_0 == rhs.x_0 &&
    lhs.current == rhs.current &&
    lhs.t_0 == rhs.t_0 &&
    lhs.goal == rhs.goal &&
    lhs.goal_thresh == rhs.goal_thresh &&
    lhs.seg_length == rhs.seg_length &&
    lhs.tau == rhs.tau &&
    lhs.dt == rhs.dt &&
    lhs.integrate_iter == rhs.integrate_iter;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dmp::GetDMPStepPlanRequest_<ContainerAllocator1> & lhs, const ::dmp::GetDMPStepPlanRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dmp

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dmp::GetDMPStepPlanRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dmp::GetDMPStepPlanRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dmp::GetDMPStepPlanRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dmp::GetDMPStepPlanRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dmp::GetDMPStepPlanRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dmp::GetDMPStepPlanRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dmp::GetDMPStepPlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a9be5382ad5d607b32c0da4edcfec81";
  }

  static const char* value(const ::dmp::GetDMPStepPlanRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a9be5382ad5d607ULL;
  static const uint64_t static_value2 = 0xb32c0da4edcfec81ULL;
};

template<class ContainerAllocator>
struct DataType< ::dmp::GetDMPStepPlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dmp/GetDMPStepPlanRequest";
  }

  static const char* value(const ::dmp::GetDMPStepPlanRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dmp::GetDMPStepPlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A starting state to begin planning from\n"
"float64[] x_0\n"
"\n"
"# current status\n"
"DMPPoint current\n"
"\n"
"# The time in seconds at which to begin the planning segment. \n"
"# Should only be nonzero when doing a partial segment plan that does not start at beginning of DMP\n"
"float64 t_0\n"
"\n"
"# The goal of the plan\n"
"float64[] goal\n"
"\n"
"# For dimensions with a value greater than zero, planning will continue until \n"
"# the predicted state is within the specified distance of the goal in all such dimensions.\n"
"# Dimensions with values less than or equal to zero will be ignored.\n"
"# Trajectory plan will always be at least tau seconds long.\n"
"float64[] goal_thresh\n"
"\n"
"# The length of the requested plan segment in seconds. Set to -1 if plan until goal is desired.\n"
"float64 seg_length\n"
"\n"
"# A time constant to set the length of DMP replay in seconds until 95% phase convergence\n"
"float64 tau\n"
"\n"
"# The time resolution, in seconds, at which to plan\n"
"float64 dt\n"
"\n"
"# Number of times to loop in numerical integration.  This can generally be 1, unless dt is large (>1 second)\n"
"int32 integrate_iter\n"
"\n"
"\n"
"================================================================================\n"
"MSG: dmp/DMPPoint\n"
"# Positions and velocities of DOFs\n"
"#Velocity is only used for movement plans, not for giving demonstrations.\n"
"float64[] positions\n"
"float64[] velocities\n"
"\n"
"\n"
;
  }

  static const char* value(const ::dmp::GetDMPStepPlanRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dmp::GetDMPStepPlanRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_0);
      stream.next(m.current);
      stream.next(m.t_0);
      stream.next(m.goal);
      stream.next(m.goal_thresh);
      stream.next(m.seg_length);
      stream.next(m.tau);
      stream.next(m.dt);
      stream.next(m.integrate_iter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetDMPStepPlanRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dmp::GetDMPStepPlanRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dmp::GetDMPStepPlanRequest_<ContainerAllocator>& v)
  {
    s << indent << "x_0[]" << std::endl;
    for (size_t i = 0; i < v.x_0.size(); ++i)
    {
      s << indent << "  x_0[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x_0[i]);
    }
    s << indent << "current: ";
    s << std::endl;
    Printer< ::dmp::DMPPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.current);
    s << indent << "t_0: ";
    Printer<double>::stream(s, indent + "  ", v.t_0);
    s << indent << "goal[]" << std::endl;
    for (size_t i = 0; i < v.goal.size(); ++i)
    {
      s << indent << "  goal[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.goal[i]);
    }
    s << indent << "goal_thresh[]" << std::endl;
    for (size_t i = 0; i < v.goal_thresh.size(); ++i)
    {
      s << indent << "  goal_thresh[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.goal_thresh[i]);
    }
    s << indent << "seg_length: ";
    Printer<double>::stream(s, indent + "  ", v.seg_length);
    s << indent << "tau: ";
    Printer<double>::stream(s, indent + "  ", v.tau);
    s << indent << "dt: ";
    Printer<double>::stream(s, indent + "  ", v.dt);
    s << indent << "integrate_iter: ";
    Printer<int32_t>::stream(s, indent + "  ", v.integrate_iter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DMP_MESSAGE_GETDMPSTEPPLANREQUEST_H
